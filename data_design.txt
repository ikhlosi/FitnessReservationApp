Device:
	- int ID (auto generated by DB)
	- string type
	- (maybe: state: usable/unusable)

Reservation:
	- ID (int, auto generated)
	- DateOfReservation (DateTime)
	- ChosenTimeSlot (TimeSlot)
	### Maybe: Entry, where Entry is an object which holds Timeslot and Device data
	- ChosenDevice (Device)
	// - ChosenTimeSlots (List<TimeSlot>)
	// - DevicePerTimeSlots (Dictionary<Device,List<TimeSlots>>)
	- Client (Client)

(
Entry:
	- Device
	- 
)

TimeSlot:
	- Session ({Morning, Noon, Evening}) => maybe handled in UI (filtering output)
	- StartHour (int)
	- EndHour (int) (= StartHour + 1)
	Maybe all this gets handled in UI

Client:
	- ID (int)
	- E-mail (string)
	- FirstName (string)
	- LastName (string)
	

Fitness:
	- AvailableDevices (List<Device>)
	- AddDevice()
	- RemoveDevice()
	- MarkDeviceUnavailable()








  Can have new devices -> must be added to list of available devices ==> Fitness class which holds list of Devices
- If Device gets removed from fitness, keep historical reservations ==> Controller class immediately writes to DB (maybe)
- Cannot remove Device if it has reservations (pending) ==> Controller controls if there is Reservation associated with Device


Reservation: client_id, date, timeslot_id, device_id, reservation_id
